import sys
import pygame
import time
from Music_list import *
img = pygame.image.load('logo.png')
pygame.init()

background_colour = (213, 232, 212)
WHITE = (255, 255, 255)
RED = (200, 0, 0)
BRIGHT_RED = (255, 0, 0)
BLACK = (0, 0, 0)

clock = pygame.time.Clock()
mpos = pygame.mouse.get_pos()

def screen_fix():
    pygame.display.set_mode((800, 600),0,32)
    pygame.mixer.music.load(maintheme), pygame.mixer.music.play(-1,0.0)
    pygame.display.set_caption('MonoCoasterWeg')

def text_objects(text,font):
    textSurface = font.render(text, True, BLACK)
    return textSurface, textSurface.get_rect()

def button(msg,x,y,w,h,ic,ac,action=None):
    mpos = pygame.mouse.get_pos()
    click =pygame.mouse.get_pressed()

    if x+w > mpos[0] > x and y+h > mpos[1] > y:
        pygame.draw.rect(screen, ac, (x, y, w, h))
        if click[0] == 1 and action != None:
            if action == "back":
                screen_fix(),gm.run()
    else:
        pygame.draw.rect(screen, ic, (x, y, w, h))
    smallText = pygame.font.Font("freesansbold.ttf",16)
    textSurf, textRect = text_objects(msg ,smallText)
    textRect.center = ((x+(w/2)),(y+(h/2)))
    screen.blit(textSurf,textRect)

class MenuItem(pygame.font.Font):
    def __init__(self, text, font=None, font_size=30,
                 font_color=BLACK, xxx_todo_changeme=(0, 0)):
        (pos_x, pos_y) = xxx_todo_changeme
        pygame.font.Font.__init__(self, font, font_size)
        self.text = text
        self.font_size = font_size
        self.font_color = font_color
        self.label = self.render(self.text, 1, self.font_color)
        self.width = self.label.get_rect().width
        self.height = self.label.get_rect().height
        self.dimensions = (self.width, self.height)
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.position = pos_x, pos_y

    def is_mouse_selection(self, xxx_todo_changeme1):
        (posx, posy) = xxx_todo_changeme1
        if (posx >= self.pos_x and posx <= self.pos_x + self.width) and \
            (posy >= self.pos_y and posy <= self.pos_y + self.height):
                return True
        return False

    def set_position(self, x, y):
        self.position = (x, y)
        self.pos_x = x
        self.pos_y = y

    def set_font_color(self, rgb_tuple):
        self.font_color = rgb_tuple
        self.label = self.render(self.text, 1, self.font_color)

class MonoCoasterWeg:
    def __init__(self, window, items, funcs, bg_color=(213,232,212), font=None, font_size=30,
                    font_color=(WHITE)):
        self.window = window
        self.win_width = self.window.get_rect().width
        self.win_height = self.window.get_rect().height

        pygame.mixer.music.load(maintheme)
        pygame.mixer.music.play(-1,0.0)

        self.bg_color = bg_color
        self.clock = pygame.time.Clock()

        self.funcs = funcs
        self.items = []
        for index, item in enumerate(items):
            menu_item = MenuItem(item)

            # t_h: total height of text block
            text_height = len(items) * menu_item.height
            pos_x = (self.win_width / 2) - (menu_item.width / 2)
            pos_y = (self.win_height / 2) - (text_height / 2) + ((index * 2) + index * menu_item.height)

            menu_item.set_position(pos_x, pos_y)
            self.items.append(menu_item)

        self.mouse_is_visible = True
        self.cur_item = None

    def set_mouse_visibility(self):
        if self.mouse_is_visible:
            pygame.mouse.set_visible(True)
        else:
            pygame.mouse.set_visible(False)

    def set_keyboard_selection(self, key):
        """
        Marks the MenuItem chosen via up and down keys.
        """
        for item in self.items:
            # Return all to neutral
            item.set_italic(False)
            item.set_font_color(BLACK)

        if self.cur_item is None:
            self.cur_item = 0
        else:
            # Find the chosen item
            if key == pygame.K_UP and \
                    self.cur_item > 0:
                self.cur_item -= 1
            elif key == pygame.K_UP and \
                    self.cur_item == 0:
                self.cur_item = len(self.items) - 1
            elif key == pygame.K_DOWN and \
                    self.cur_item < len(self.items) - 1:
                self.cur_item += 1
            elif key == pygame.K_DOWN and \
                    self.cur_item == len(self.items) - 1:
                self.cur_item = 0

        self.items[self.cur_item].set_italic(True)
        self.items[self.cur_item].set_font_color(RED)

        if key == pygame.K_SPACE or key == pygame.K_RETURN:
            text = self.items[self.cur_item].text
            pygame.mixer.music.load(buttonclick)
            pygame.mixer.music.play(0,0.0)
            self.funcs[text]()

    def set_mouse_selection(self, item, mpos):
        """Marks the MenuItem the mouse cursor hovers on."""
        if item.is_mouse_selection(mpos):
            item.set_font_color(RED)
            item.set_italic(True)
        else:
            item.set_font_color(BLACK)
            item.set_italic(False)

    def run(self):
        mainloop = True
        while mainloop:
            # Limit frame speed to 50 FPS
            self.clock.tick(50)

            mpos = pygame.mouse.get_pos()
            # print(mpos)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    mainloop = False
                if event.type == pygame.KEYDOWN:
                    self.mouse_is_visible = False
                    self.set_keyboard_selection(event.key)
                if event.type == pygame.MOUSEBUTTONDOWN:
                    for item in self.items:
                        if item.is_mouse_selection(mpos):
                            pygame.mixer.music.load(buttonclick)
                            pygame.mixer.music.play(0,0.0)
                            self.funcs[item.text]()

            if pygame.mouse.get_rel() != (0, 0):
                self.mouse_is_visible = True
                self.cur_item = None

            self.set_mouse_visibility()

            # Redraw the background
            self.window.fill(self.bg_color)
            screen.blit(img,(140,10))
            for item in self.items:
                if self.mouse_is_visible:
                    self.set_mouse_selection(item, mpos)
                self.window.blit(item.label, item.position)

            pygame.display.update()


if __name__ == "__main__":
    def hello_world():
        print("Hello World!")

    def link_to_setting():
        print("link to settings")
        class Text(object):
            def __init__(self):
                pygame.init()
                self.clock = pygame.time.Clock()
                self.font = pygame.font.SysFont('Bookman old style', 20)
                self.font1 = pygame.font.SysFont('Bookman old style', 40)
                pygame.display.set_caption('Settings')
                self.screen = pygame.display.set_mode((600,600), 0, 32)
                self.screen.fill((background_colour))
                pygame.mixer.music.load(settings)
                pygame.mixer.music.play(-1,0.0)
                pygame.display.update()

            def addText(self):
                self.screen.blit(self.font1.render('Settings',True, (255,0,0)), (240, 20))
                self.screen.blit(self.font.render('SOUND-EFFECT                         ON/OFF',True, (255,0,0)), (100,170))
                self.screen.blit(self.font.render('MUSIC                                         ON/OFF',True, (255,0,0)), (100,200))
                pygame.display.update()

            def run(self):
                self.clock = pygame.time.Clock()
                mainloop = True
                while mainloop:
                    # Limit frame speed to 50 FPS
                    self.clock.tick(50)

                    button("Main menu",475,540,100,40,RED,BRIGHT_RED,"back")

                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit(); sys.exit()

        if __name__ == '__main__':
            Text3 = Text()
            Text3.addText()
            Text3.run()

    def link_to_instructions():
        print("link to instructions")
        class Instructions:
            def __init__(self, text, items, font=None, font_size = 30, font_color = (153,0,0), xxx_todo_changeme=(0, 0)):
                (posX, posY) = xxx_todo_changeme
                self.text = text
                self.font_size = font_size
                self.font_color = font_color
                self.width = self.label.get_rect().width
                self.height = self.label.get_rect().height
                self.dimensions = (self.width, self.height)
                self.posX = posX
                self.posY = posY
                self.position = posX, posY

        class Text(object):
            def __init__(self):
                pygame.init()
                self.font = pygame.font.SysFont('Bookman Old Style', 15)
                self.font1 = pygame.font.SysFont('Bookman Old Style', 30)
                pygame.display.set_caption('Instructions')
                self.screen = pygame.display.set_mode((600,600), 0, 32)
                self.screen.fill((background_colour))
                pygame.mixer.music.load(instructions)
                pygame.mixer.music.play(-1,0.0)
                pygame.display.update()

            def addText(self):
                self.screen.blit(self.font.render('',True, (255,0,0)), (265, 10))
                self.screen.blit(self.font1.render('Instructions',True, (255,0,0)), (235, 20))
                self.screen.blit(self.font.render('Strategies:',True, (255,0,0)), (10, 40))
                self.screen.blit(self.font.render('-You can play with up to 4 players!',True, (255,0,0)), (10, 70))
                self.screen.blit(self.font.render('-Always buy the most expensive stuff.',True, (255,0,0)), (10, 90))
                self.screen.blit(self.font.render('-Swap your old rides for new ones.',True, (255,0,0)), (10, 110))
                self.screen.blit(self.font.render('-When you have completed your essential, buy nothing and just make money.',True, (255,0,0)), (10, 130))
                self.screen.blit(self.font.render('-Always buy rollercoasters, because with those you earn the most money.',True, (255,0,0)), (10, 150))
                self.screen.blit(self.font.render('Rules:',True, (255,0,0)), (10, 210))
                self.screen.blit(self.font.render('• For every person that visits your park, you get income.',True, (255,0,0)), (10, 240))
                self.screen.blit(self.font.render('• ',True, (255,0,0)), (10, 260))
                self.screen.blit(self.font.render('• ',True, (255,0,0)), (10, 280))
                self.screen.blit(self.font.render('• ',True, (255,0,0)), (10, 300))
                self.screen.blit(self.font.render('• ',True, (255,0,0)), (10, 320))
                pygame.display.update()

            def run(self):
                self.clock = pygame.time.Clock()
                mainloop = True
                while mainloop:
                    # Limit frame speed to 50 FPS
                    self.clock.tick(50)

                    button("Main menu",475,540,100,40,RED,BRIGHT_RED,"back")

                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit(); sys.exit()

        if __name__ == '__main__':
            Text3 = Text()
            Text3.addText()
            Text3.run()

    def link_to_credits():
        print("link to credits")
        class Text(object):
            def __init__(self):
                pygame.init()
                self.font = pygame.font.SysFont('Bookman old style', 20)
                self.font1 = pygame.font.SysFont('Bookman old style', 30)
                pygame.display.set_caption('Credits')
                self.screen = pygame.display.set_mode((600,600), 0, 32)
                self.screen.fill((background_colour))
                pygame.mixer.music.load(credits)
                pygame.mixer.music.play(-1,0.0)
                pygame.display.update()

            def addText(self):
                self.screen.blit(self.font1.render('Credits',True, (255,0,0)), (240, 20))
                self.screen.blit(self.font.render('Designed in 2015',True, (255,0,0)), (210,120))
                self.screen.blit(self.font.render('Programmed in 2016',True, (255,0,0)), (195,150))
                self.screen.blit(self.font.render('Programmed by:',True, (255,0,0)), (100,200))
                self.screen.blit(self.font.render('Patrick Bos,',True, (255,0,0)), (100,230))
                self.screen.blit(self.font.render('Tommy Galic,',True, (255,0,0)), (100,250))
                self.screen.blit(self.font.render('Marinda Kooiman,',True, (255,0,0)), (100,270))
                self.screen.blit(self.font.render('Rochelle Mangre',True, (255,0,0)), (100,290))
                self.screen.blit(self.font.render('and',True, (255,0,0)), (100,310))
                self.screen.blit(self.font.render('Devon Marsham.',True, (255,0,0)), (100,330))
                self.screen.blit(self.font.render('Music:',True, (255,0,0)), (100,370))
                self.screen.blit(self.font.render('Patrick Bos',True, (255,0,0)), (100,400))
                pygame.display.update()

            def run(self):
                self.clock = pygame.time.Clock()
                mainloop = True
                while mainloop:
                    # Limit frame speed to 50 FPS
                    self.clock.tick(50)

                    button("Main menu",475,540,100,40,RED,BRIGHT_RED,"back")

                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit(); sys.exit()

        if __name__ == '__main__':
            Text3 = Text()
            Text3.addText()
            Text3.run()

    # Creating the screen
    screen = pygame.display.set_mode((800, 600), 0, 32)

    menu_items = ('Start', 'Settings', 'Instructions', 'Credits', 'Quit')
    funcs = {'Start': hello_world,
             'Quit': sys.exit,
             'Credits': link_to_credits,
             'Instructions': link_to_instructions,
             'Settings': link_to_setting}
    pygame.display.set_caption('MonoCoasterWeg')
    gm = MonoCoasterWeg(screen, funcs.keys(), funcs)
    gm.run()

pygame.quit()
quit()
