import sys
import pygame
import time
import random
# from Music_list import *
img = pygame.image.load('logo.png')
pygame.init()

background_colour = (213, 232, 212)
WHITE = (255, 255, 255)
RED = (200, 0, 0)
BRIGHT_RED = (255, 0, 0)
BLACK = (0, 0, 0)

positionlist =[(742,738),(637,715),(576,715), (512,715),(448,715),(385,715),(320, 715),(256,715),(192,715),(129,715)
,(52, 775),(52, 640),(52, 575), (52, 510),(52,455),(52, 390),(52,325),(52,260),(52,195),(52, 130),(30,35),
(130,30),(195,30),(260,30),(325,30),(390,30),(450,30),(515,30),(580,30),(640,30),(735,30),
(735,130),(735,195),(735,260),(735, 325),(735, 390),(735, 455),(735,510),(735,575),(735,650)]

amount = 0
mpos = pygame.mouse.get_pos()
audio_count = 0
if audio_count == 0:
    pygame.mixer.init()
else:
    pygame.mixer.stop()
    pygame.mixer.quit()

# Main menu (speelt zich af bij het opstarten van het spel)
maintheme = "Rollercoaster Tycoon 2 - Main Theme.wav"

# Instructions (bij het lezen van de instructies)
instructions = "Monopoly Deluxe Music 2.mp3"

# Settings (bij de instellingen)
settings = "Carnaval festival Efteling Muziek.mp3"

# Credit song
credits = "Nyan Cat - Smooth Jazz Cover.mp3"

# Dice sound (bij het rollen van de dobbelsteen)
dicesound = "Shake And Roll Dice Sound Effect.mp3"

# Ka Ching sound (voor het kopen van een attractie/inkomen krijgen)
cashsound = "ka-ching sound effect.mp3"

# Main soundtrack during game
gametheme = "_PS1_ Monopoly OST - South Side Bar _EXTRA EXTENDED_.mp3"

# Click sound for buttons
buttonclick = "Axe Left Click Sound Effect.wav"

# Pawn movement sound
pawnmove = "Knock on Wood - Sound Effect.wav"

# Winning screen sound
applause = "Crowd Applause Sound Effect.mp3"

# Shuffling cards sound
shufflecards = "Shuffle cards sound effect.mp3"


def screen_fix():
    pygame.display.set_mode((800, 600), 0, 32)
    if audio_count == 0:
        pygame.mixer.music.load(maintheme)
        pygame.mixer.music.play(-1, 0.0)
    pygame.display.set_caption('MonoCoasterWeg')


def text_objects(text, font):
    textsurface = font.render(text, True, BLACK)
    return textsurface, textsurface.get_rect()


def button(msg, x, y, w, h, ic, ac, action=None):
    mpos = pygame.mouse.get_pos()
    click = pygame.mouse.get_pressed()
    global audio_count
    global amount

    if x+w > mpos[0] > x and y+h > mpos[1] > y:
        pygame.draw.rect(screen, ac, (x, y, w, h))
        if click[0] == 1 and action is not None:
            if action == "back":
                screen_fix()
                gm.run()
                pygame.mixer.stop()

            elif action == "audio_off":
                audio_count = 1
                pygame.mixer.quit()

            elif action == "audio_on":
                audio_count = 0
                pygame.mixer.init()
                pygame.mixer.music.load(settings)
                pygame.mixer.music.play(-1, 0.0)

            elif action == "2p":
                print("derp")
                amount += 2
                background = WHITE  # kleur voor achtergrond
                w = 1000  # breedte window
                h = 816  # lengte window
                screen1 = pygame.display.set_mode((w, h))

                bg = pygame.image.load('Bboard.png')  # laadt het plaatje alleen je moet hem in de goede plek hebben of in dezelfde map als de code
                screen1.fill(background)
                screen1.blit(bg, (0, 0))

                if audio_count == 0:
                    pygame.mixer.music.load(gametheme)
                    pygame.mixer.music.play(-1, 0.0)

                def draw():
                    p1.draw(screen1)
                    p2.draw(screen1)
                draw()

                pygame.display.flip()

                # loop
                mainloop = True
                while mainloop:
                    button("Main menu", 850, 40, 100, 40, RED, BRIGHT_RED, "back")
                    button("Dice 1", 850, 100, 100, 40, RED, BRIGHT_RED, "dice")
                    button("Dice 2", 850, 160, 100, 40, RED, BRIGHT_RED, "dice2")
                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit()
                            sys.exit()
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_ESCAPE:
                                pygame.quit()
                                sys.exit()

            elif action == "3p":
                print("derp")
                amount += 3
                background = WHITE  # kleur voor achtergrond
                w = 1000  # breedte window
                h = 816  # lengte window
                screen1 = pygame.display.set_mode((w, h))

                bg = pygame.image.load('Bboard.png')  # laadt het plaatje alleen je moet hem in de goede plek hebben of in dezelfde map als de code
                screen1.fill(background)
                screen1.blit(bg, (0, 0))

                if audio_count == 0:
                    pygame.mixer.music.load(gametheme)
                    pygame.mixer.music.play(-1, 0.0)

                def draw():
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                draw()

                pygame.display.flip()

                # loop
                mainloop = True
                while mainloop:
                    button("Main menu", 850, 40, 100, 40, RED, BRIGHT_RED, "back")
                    button("Dice 1", 850, 100, 100, 40, RED, BRIGHT_RED, "dice")
                    button("Dice 2", 850, 160, 100, 40, RED, BRIGHT_RED, "dice2")
                    button("Dice 3", 850, 220, 100, 40, RED, BRIGHT_RED, "dice3")
                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit()
                            sys.exit()
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_ESCAPE:
                                pygame.quit()
                                sys.exit()

            elif action == "4p":
                print("derp")
                amount += 4
                background = WHITE  # kleur voor achtergrond
                w = 1000  # breedte window
                h = 816  # lengte window
                screen1 = pygame.display.set_mode((w, h))

                bg = pygame.image.load('Bboard.png')  # laadt het plaatje alleen je moet hem in de goede plek hebben of in dezelfde map als de code
                screen1.fill(background)
                screen1.blit(bg, (0, 0))

                if audio_count == 0:
                    pygame.mixer.music.load(gametheme)
                    pygame.mixer.music.play(-1, 0.0)

                def draw():
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                    p4.draw(screen1)
                draw()
                pygame.display.flip()

                # loop
                mainloop = True
                while mainloop:
                    button("Main menu", 850, 40, 100, 40, RED, BRIGHT_RED, "back")
                    button("Dice 1", 850, 100, 100, 40, RED, BRIGHT_RED, "dice")
                    button("Dice 2", 850, 160, 100, 40, RED, BRIGHT_RED, "dice2")
                    button("Dice 3", 850, 220, 100, 40, RED, BRIGHT_RED, "dice3")
                    button("Dice 4", 850, 280, 100, 40, RED, BRIGHT_RED, "dice4")
                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit()
                            sys.exit()
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_ESCAPE:
                                pygame.quit()
                                sys.exit()

            elif action == "dice":
                w = 1000  # breedte window
                h = 816  # lengte window
                screen1 = pygame.display.set_mode((w, h))
                background = WHITE  # kleur voor achtergrond
                bg = pygame.image.load('Bboard.png')  # laadt het plaatje alleen je moet hem in de goede plek hebben of in dezelfde map als de code
                screen1.fill(background)
                screen1.blit(bg, (0, 0))
                dobbel = random.randint(1, 6)
                time.sleep(.5)
                p1.i += dobbel
                if p1.i > 39:
                   p1.i = p1.i - 39
                print(p1.i)
                if amount == 2:
                    p1.draw(screen1)
                    p2.draw(screen1)
                elif amount == 3:
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                else:
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                    p4.draw(screen1)
                pygame.display.update()

            elif action == "dice2":
                w = 1000  # breedte window
                h = 816  # lengte window
                screen1 = pygame.display.set_mode((w, h))
                background = WHITE  # kleur voor achtergrond
                bg = pygame.image.load('Bboard.png')  # laadt het plaatje alleen je moet hem in de goede plek hebben of in dezelfde map als de code
                screen1.fill(background)
                screen1.blit(bg, (0, 0))
                dobbel = random.randint(1, 6)
                time.sleep(.5)
                p2.i += dobbel
                if p2.i > 39:
                   p2.i = p2.i - 39
                print(p2.i)
                if amount == 2:
                    p1.draw(screen1)
                    p2.draw(screen1)
                elif amount == 3:
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                else:
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                    p4.draw(screen1)
                pygame.display.update()

            elif action == "dice3":
                w = 1000  # breedte window
                h = 816  # lengte window
                screen1 = pygame.display.set_mode((w, h))
                background = WHITE  # kleur voor achtergrond
                bg = pygame.image.load('Bboard.png')  # laadt het plaatje alleen je moet hem in de goede plek hebben of in dezelfde map als de code
                screen1.fill(background)
                screen1.blit(bg, (0, 0))
                dobbel = random.randint(1, 6)
                time.sleep(.5)
                p3.i += dobbel
                if p3.i > 39:
                   p3.i = p3.i - 39
                print(p3.i)
                if amount == 3:
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                else:
                    p1.draw(screen1)
                    p2.draw(screen1)
                    p3.draw(screen1)
                    p4.draw(screen1)
                pygame.display.update()

            elif action == "dice4":
                w = 1000  # breedte window
                h = 816  # lengte window
                screen1 = pygame.display.set_mode((w, h))
                background = WHITE  # kleur voor achtergrond
                bg = pygame.image.load('Bboard.png')  # laadt het plaatje alleen je moet hem in de goede plek hebben of in dezelfde map als de code
                screen1.fill(background)
                screen1.blit(bg, (0, 0))
                dobbel = random.randint(1, 6)
                time.sleep(.5)
                p4.i += dobbel
                if p4.i > 39:
                   p4.i = p3.i - 39
                print(p4.i)
                p1.draw(screen1)
                p2.draw(screen1)
                p3.draw(screen1)
                p4.draw(screen1)
                pygame.display.update()

    else:
        pygame.draw.rect(screen, ic, (x, y, w, h))
    smalltext = pygame.font.Font("freesansbold.ttf", 16)
    textsurf, textrect = text_objects(msg, smalltext)
    textrect.center = ((x+(w/2)), (y+(h/2)))
    screen.blit(textsurf, textrect)


class player:
    def __init__(self, name, position, char, money, i):
        self.name = name
        self.position = position
        self.char = char
        self.money = money
        self.i = i

    def draw(self, field):
        field.blit(pygame.transform.scale(self.char, (50, 40)),
                   positionlist[self.i])

p1 = player("p1",positionlist[0], pygame.image.load('bpawn.png'),1000, 0)
p2 = player("p2",positionlist[0], pygame.image.load('blupawn.png'),1000, 0)
p3 = player("p3",positionlist[0], pygame.image.load('gpawn.png'),1000, 0)
p4 = player("p4",positionlist[0], pygame.image.load('rpawn.png'),1000, 0)


class MenuItem(pygame.font.Font):
    def __init__(self, text, font=None, font_size=30,
                 font_color=BLACK, xxx_todo_changeme=(0, 0)):
        (pos_x, pos_y) = xxx_todo_changeme
        pygame.font.Font.__init__(self, font, font_size)
        self.text = text
        self.font_size = font_size
        self.font_color = font_color
        self.label = self.render(self.text, 1, self.font_color)
        self.width = self.label.get_rect().width
        self.height = self.label.get_rect().height
        self.dimensions = (self.width, self.height)
        self.pos_x = pos_x
        self.pos_y = pos_y
        self.position = pos_x, pos_y

    def is_mouse_selection(self, xxx_todo_changeme1):
        (posx, posy) = xxx_todo_changeme1
        if posx >= self.pos_x and posx <= self.pos_x + self.width and posy >= self.pos_y and posy <= self.pos_y + self.height:
            return True
        return False

    def set_position(self, x, y):
        self.position = (x, y)
        self.pos_x = x
        self.pos_y = y

    def set_font_color(self, rgb_tuple):
        self.font_color = rgb_tuple
        self.label = self.render(self.text, 1, self.font_color)


class MonoCoasterWeg:
    def __init__(self, window, items, funcs, bg_color=(213, 232, 212), font=None, font_size=30):
        self.window = window
        self.win_width = self.window.get_rect().width
        self.win_height = self.window.get_rect().height

        if audio_count == 0:
            pygame.mixer.music.load(maintheme)
            pygame.mixer.music.play(-1, 0.0)
        else:
            print(pygame.mixer.get_init())

        self.bg_color = bg_color
        self.clock = pygame.time.Clock()

        self.funcs = funcs
        self.items = []
        for index, item in enumerate(items):
            menu_item = MenuItem(item)

            # t_h: total height of text block
            text_height = len(items) * menu_item.height
            pos_x = (self.win_width / 2) - (menu_item.width / 2)
            pos_y = (self.win_height / 2) - (text_height / 2) + ((index * 2) + index * menu_item.height)

            menu_item.set_position(pos_x, pos_y)
            self.items.append(menu_item)

        self.mouse_is_visible = True
        self.cur_item = None

    def set_mouse_visibility(self):
        if self.mouse_is_visible:
            pygame.mouse.set_visible(True)
        else:
            pygame.mouse.set_visible(False)

    def set_keyboard_selection(self, key):
        # Marks the MenuItem chosen via up and down keys.
        for item in self.items:
            # Return all to neutral
            item.set_italic(False)
            item.set_font_color(BLACK)

        if self.cur_item is None:
            self.cur_item = 0
        else:
            # Find the chosen item
            if key == pygame.K_UP and \
                    self.cur_item > 0:
                self.cur_item -= 1
            elif key == pygame.K_UP and \
                    self.cur_item == 0:
                self.cur_item = len(self.items) - 1
            elif key == pygame.K_DOWN and \
                    self.cur_item < len(self.items) - 1:
                self.cur_item += 1
            elif key == pygame.K_DOWN and \
                    self.cur_item == len(self.items) - 1:
                self.cur_item = 0

        self.items[self.cur_item].set_italic(True)
        self.items[self.cur_item].set_font_color(RED)

        if key == pygame.K_SPACE or key == pygame.K_RETURN:
            text = self.items[self.cur_item].text
            if audio_count == 0:
                pygame.mixer.music.load(buttonclick)
                pygame.mixer.music.play(0, 0.0)
            self.funcs[text]()

        if key == pygame.K_ESCAPE:
            pygame.quit()
            sys.exit()

    def set_mouse_selection(self, item, mpos):
        # Marks the MenuItem the mouse cursor hovers on.
        if item.is_mouse_selection(mpos):
            item.set_font_color(RED)
            item.set_italic(True)
        else:
            item.set_font_color(BLACK)
            item.set_italic(False)

    def run(self):
        mainloop = True
        while mainloop:
            # Limit frame speed to 50 FPS
            self.clock.tick(50)

            mpos = pygame.mouse.get_pos()
            # print(mpos)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    mainloop = False
                if event.type == pygame.KEYDOWN:
                    self.mouse_is_visible = False
                    self.set_keyboard_selection(event.key)
                if event.type == pygame.MOUSEBUTTONDOWN:
                    for item in self.items:
                        if item.is_mouse_selection(mpos):
                            if pygame.mixer.init():
                                pygame.mixer.music.load(buttonclick)
                                pygame.mixer.music.play(0, 0.0)
                            self.funcs[item.text]()

            if pygame.mouse.get_rel() != (0, 0):
                self.mouse_is_visible = True
                self.cur_item = None

            self.set_mouse_visibility()

            # Redraw the background
            self.window.fill(self.bg_color)
            screen.blit(img, (140, 10))
            for item in self.items:
                if self.mouse_is_visible:
                    self.set_mouse_selection(item, mpos)
                self.window.blit(item.label, item.position)

            pygame.display.update()


if __name__ == "__main__":
    # Code voor atm winscherm maar game code komt nog ervoor
    def hello_world():
        print("Hello World!")

        def pselect():
            winscherm_surface = pygame.display.set_mode((800, 600))
            pygame.display.set_caption('Player selection')
            my_font = pygame.font.SysFont("broadway", 30)

            # Fills the background
            winscherm_surface.fill((213, 232, 212))

            # Sets the text
            the_text = my_font.render("Choose the amount of players", True, (255, 0, 0))

            # Adds the text to the screen, with the positions
            winscherm_surface.blit(the_text, (150, 90))

        pselect()

        mainloop = True
        while mainloop:
            button("Main menu", 675, 540, 100, 40, RED, BRIGHT_RED, "back")
            button("2 Players", 350, 250, 100, 40, RED, BRIGHT_RED, "2p")
            button("3 Players", 350, 300, 100, 40, RED, BRIGHT_RED, "3p")
            button("4 Players", 350, 350, 100, 40, RED, BRIGHT_RED, "4p")
            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        pygame.quit()
                        sys.exit()

    # Code for creating the settings screen
    def link_to_setting():
        print("link to settings")

        class Text(object):
            def __init__(self):
                pygame.init()
                self.clock = pygame.time.Clock()
                self.font = pygame.font.SysFont('Bookman old style', 20)
                self.font1 = pygame.font.SysFont('Bookman old style', 40)
                pygame.display.set_caption('Settings')
                self.screen = pygame.display.set_mode((600, 600), 0, 32)
                self.screen.fill(background_colour)
                if audio_count == 0:
                    pygame.mixer.music.load(settings)
                    pygame.mixer.music.play(-1, 0.0)
                pygame.display.update()

            def addtext(self):
                self.screen.blit(self.font1.render('Settings', True, (255, 0, 0)), (240, 20))
                self.screen.blit(self.font.render('AUDIO', True, (255, 0, 0)), (100, 200))
                pygame.display.update()

            def run(self):
                self.clock = pygame.time.Clock()
                mainloop = True
                while mainloop:
                    # Limit frame speed to 50 FPS
                    self.clock.tick(50)

                    button("Main menu", 475, 540, 100, 40, RED, BRIGHT_RED, "back")
                    button("ON", 400, 200, 50, 20, RED, BRIGHT_RED, "audio_on")
                    button("OFF", 460, 200, 50, 20, RED, BRIGHT_RED, "audio_off")

                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit()
                            sys.exit()
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_ESCAPE:
                                pygame.quit()
                                sys.exit()

        if __name__ == '__main__':
            text3 = Text()
            text3.addtext()
            text3.run()

    # Code for creating the instructions screen
    def link_to_instructions():
        print("link to instructions")

        class Text(object):
            def __init__(self):
                pygame.init()
                self.clock = pygame.time.Clock()
                self.font = pygame.font.SysFont('Bookman Old Style', 15)
                self.font1 = pygame.font.SysFont('Bookman Old Style', 30)
                pygame.display.set_caption('Instructions')
                self.screen = pygame.display.set_mode((800, 600), 0, 32)
                self.screen.fill(background_colour)
                if audio_count == 0:
                    pygame.mixer.music.load(instructions)
                    pygame.mixer.music.play(-1, 0.0)
                pygame.display.update()

            def addtext(self):
                self.screen.blit(self.font.render('', True, (255, 0, 0)), (265, 10))
                self.screen.blit(self.font1.render('Instructions', True, (255, 0, 0)), (235, 20))
                self.screen.blit(self.font.render('Strategies:', True, (255, 0, 0)), (10, 40))
                self.screen.blit(self.font.render('-You can play with up to 4 players!', True, (255, 0, 0)), (10, 70))
                self.screen.blit(self.font.render('-Always buy the most expensive stuff.', True, (255, 0, 0)), (10, 90))
                self.screen.blit(self.font.render('-Swap your old rides for new ones.', True, (255, 0, 0)), (10, 110))
                self.screen.blit(self.font.render('-When you have completed your essential, buy nothing and just make money.', True, (255, 0, 0)), (10, 130))
                self.screen.blit(self.font.render('-Always buy rollercoasters, because with those you earn the most money.', True, (255, 0, 0)), (10, 150))
                self.screen.blit(self.font.render('Rules:', True, (255, 0, 0)), (10, 210))
                self.screen.blit(self.font.render('• For every person that visits your park, you get income.', True, (255, 0, 0)), (10, 240))
                self.screen.blit(self.font.render('• Every player gets $10.000 when they pass Start,', True, (255, 0, 0)), (10, 260))
                self.screen.blit(self.font.render('   but if you land on the Start Tile you get $20.000.', True, (255, 0, 0)), (10, 280))
                self.screen.blit(self.font.render('• If you land on a letter, you can choose if you want to buy a ride.       ', True, (255, 0, 0)), (10, 300))
                self.screen.blit(self.font.render('• If you don’t want to buy a ride, your turn ends and you need to throw the dice for income.', True, (255, 0, 0)), (10, 320))
                self.screen.blit(self.font.render('• If you want to buy a ride of that type, you pick 3 cards from the attraction type you landed on ,', True, (255, 0, 0)), (10, 340))
                self.screen.blit(self.font.render('   if the total available to you exceeds 6 otherwise pick one from the 5 or less cards directly.', True, (255, 0, 0)), (10, 360))
                self.screen.blit(self.font.render('• Choose one of the 3 rides you want to buy and pay the price of the ride.', True, (255, 0, 0)), (10, 380))
                self.screen.blit(self.font.render('• When you buy a ride it first enters in spot 1,', True, (255, 0, 0)), (10, 400))
                self.screen.blit(self.font.render('   the 2nd one you buy will enter in spot 2 etc.', True, (255, 0, 0)), (10, 420))
                self.screen.blit(self.font.render('• switching to spot 7/8 (the safe spots) costs you an entire turn of not getting income and buying rides.', True, (255, 0, 0)), (10, 440))

                pygame.display.update()

            def run(self):
                self.clock = pygame.time.Clock()
                mainloop = True
                while mainloop:
                    # Limit frame speed to 50 FPS
                    self.clock.tick(50)

                    button("Main menu", 675, 540, 100, 40, RED, BRIGHT_RED, "back")

                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit()
                            sys.exit()
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_ESCAPE:
                                pygame.quit()
                                sys.exit()

        if __name__ == '__main__':
            text3 = Text()
            text3.addtext()
            text3.run()

    # Code for creating the credits screen
    def link_to_credits():
        print("link to credits")

        class Text(object):
            def __init__(self):
                pygame.init()
                self.clock = pygame.time.Clock()
                self.font = pygame.font.SysFont('Bookman old style', 20)
                self.font1 = pygame.font.SysFont('Bookman old style', 30)
                pygame.display.set_caption('Credits')
                self.screen = pygame.display.set_mode((600, 600), 0, 32)
                self.screen.fill(background_colour)
                if audio_count == 0:
                    pygame.mixer.music.load(credits)
                    pygame.mixer.music.play(-1, 0.0)
                pygame.display.update()

            def addtext(self):
                self.screen.blit(self.font1.render('Credits', True, (255, 0, 0)), (240, 20))
                self.screen.blit(self.font.render('Designed in 2015', True, (255, 0, 0)), (210, 120))
                self.screen.blit(self.font.render('Programmed in 2016', True, (255, 0, 0)), (195, 150))
                self.screen.blit(self.font.render('Programmed by:', True, (255, 0, 0)), (100, 200))
                self.screen.blit(self.font.render('Patrick Bos,', True, (255, 0, 0)), (100, 230))
                self.screen.blit(self.font.render('Tommy Galic,', True, (255, 0, 0)), (100, 250))
                self.screen.blit(self.font.render('Marinda Kooiman,', True, (255, 0, 0)), (100, 270))
                self.screen.blit(self.font.render('Rochelle Mangre', True, (255, 0, 0)), (100, 290))
                self.screen.blit(self.font.render('and', True, (255, 0, 0)), (100, 310))
                self.screen.blit(self.font.render('Devon Marsham.', True, (255, 0, 0)), (100, 330))
                self.screen.blit(self.font.render('Music:', True, (255, 0, 0)), (100, 370))
                self.screen.blit(self.font.render('Patrick Bos', True, (255, 0, 0)), (100, 400))
                pygame.display.update()

            def run(self):
                self.clock = pygame.time.Clock()
                mainloop = True
                while mainloop:
                    # Limit frame speed to 50 FPS
                    self.clock.tick(50)

                    button("Main menu", 475, 540, 100, 40, RED, BRIGHT_RED, "back")

                    pygame.display.update()
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit()
                            sys.exit()
                        elif event.type == pygame.KEYDOWN:
                            if event.key == pygame.K_ESCAPE:
                                pygame.quit()
                                sys.exit()

        if __name__ == '__main__':
            text3 = Text()
            text3.addtext()
            text3.run()

    # Creating the screen
    screen = pygame.display.set_mode((800, 600), 0, 32)

    menu_items = ('Start', 'Settings', 'Instructions', 'Credits', 'Quit')
    funcs = {'Start': hello_world,
             'Quit': sys.exit,
             'Credits': link_to_credits,
             'Instructions': link_to_instructions,
             'Settings': link_to_setting
             }
    pygame.display.set_caption('MonoCoasterWeg')
    gm = MonoCoasterWeg(screen, funcs.keys(), funcs)
    gm.run()

pygame.quit()
quit()
